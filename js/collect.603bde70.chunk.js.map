{"version":3,"sources":["webpack:///./src/modules/Main/modules/Collect/service.ts","webpack:///./src/modules/Main/modules/Collect/views/index.tsx"],"names":["collectTableFetch","params","request","get","data","Collect","time","useSelector","state","global","currentProject","useState","tableData","setTableData","tableLoading","setTableLoading","total","pageSize","current","pagination","setPagination","tableParams","setTableParams","dateParams","startDate","endDate","projectId","fetchTableData","pageNum","res","totalCount","list","useEffect","preParams","CardWrapper","title","ErrorsTable","fetchData","onChange","paginationParam","filters","sorter","isDesc","Object","keys","length","order","undefined","orderField","field","status","join","loading"],"mappings":"oNAEaA,EAAoB,SAACC,GAAD,OAC/BC,IAAQC,IAAkC,iBAAkB,CAC1DC,KAAMH,K,uvDCOK,SAASI,IACtB,IAAMC,EAAOC,aAAuB,SAAAC,GAAK,OAAIA,EAAMC,OAAOH,QACpDI,EAAiBH,aAA+B,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,kBAF5C,IAGEC,mBAA8B,IAHhC,GAGzBC,EAHyB,KAGdC,EAHc,SAIQF,oBAAS,GAJjB,GAIzBG,EAJyB,KAIXC,EAJW,SAKIJ,mBAAmB,CAAEK,MAAO,EAAGC,SAAU,GAAIC,QAAS,IAL1D,GAKzBC,EALyB,KAKbC,EALa,SAMMT,mBAAc,IANpB,GAMzBU,EANyB,KAMZC,EANY,KAO1BC,EAAa,CACjBC,UAAWlB,EAAK,GAChBmB,QAASnB,EAAK,GACdoB,UAAWhB,GAEPiB,EAAc,e,EAAA,G,EAAA,yBAAG,sJACrBZ,GAAgB,GADK,SAEHf,EAAkB,EAAD,KAC9BuB,GAD8B,IAEjCN,SAAUE,EAAWF,SACrBW,QAAST,EAAWD,SACjBG,IANgB,OAEfQ,EAFe,OAQrBT,EAAc,CACZJ,MAAOa,EAAIC,WACXb,SAAUY,EAAIZ,SACdC,QAASW,EAAID,UAGfb,GAAgB,GAChBF,EAAagB,EAAIE,MAfI,0C,+KAAH,qDAiBpBC,qBAAU,WACRL,MACC,CAACN,IACJW,qBAAU,YACgB,IAApBtB,IACFiB,EAAeJ,GACfD,GAAe,SAAAW,GAAS,cACnBA,GADmB,IAEtBL,QAAS,UAGZ,CAACtB,EAAMI,IAiBV,OACE,6BACE,kBAACwB,EAAA,EAAD,CAAaC,MAAM,QACjB,kBAACC,EAAA,EAAD,CACEC,UAAWV,EACXW,SApBc,SAACC,EAAiBC,EAASC,GAC/C,IAAMC,EAASC,OAAOC,KAAKH,GAAQI,OAAS,EAAsB,WAAjBJ,EAAOK,MAAqB,EAAI,OAAKC,EACpFC,EAAaP,EAAOQ,MACpBhC,EAAWsB,EAAgBtB,SAC3BiC,EAASV,EAAQU,OAASV,EAAQU,OAAOC,KAAK,KAAO,GAEjDvB,EADWP,EAAYqB,SAAWA,GAAUrB,EAAY2B,aAAeA,EAClD,EAAIT,EAAgBrB,QAC/CI,EAAe,CACboB,SACAM,aACApB,UACAX,WACAiC,YASIE,QAAStC,EACTF,UAAWA,EACXO,WAAYA","file":"js/collect.603bde70.chunk.js","sourcesContent":["import request from '@/services/request'\n\nexport const collectTableFetch = (params: NCollectTable.Request) =>\n  request.get<null, NCollectTable.Response>('/collect/table', {\n    data: params,\n  })\n","import CardWrapper from '@/components/CardWrapper'\nimport { RootState } from '@/store/index.type'\nimport React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport ErrorsTable from '../../components/ErrorsTable'\nimport { collectTableFetch } from '../service'\ninterface AntDPage {\n  pageSize: number\n  current: number\n  total: number\n}\nexport default function Collect() {\n  const time = useSelector<RootState>(state => state.global.time)\n  const currentProject = useSelector<RootState, number>(state => state.global.currentProject)\n  const [tableData, setTableData] = useState<NErrorsTable.List[]>([])\n  const [tableLoading, setTableLoading] = useState(false)\n  const [pagination, setPagination] = useState<AntDPage>({ total: 0, pageSize: 10, current: 1 })\n  const [tableParams, setTableParams] = useState<any>({})\n  const dateParams = {\n    startDate: time[0],\n    endDate: time[1],\n    projectId: currentProject,\n  }\n  const fetchTableData = async (params = {}) => {\n    setTableLoading(true)\n    const res = await collectTableFetch({\n      ...dateParams,\n      pageSize: pagination.pageSize,\n      pageNum: pagination.current,\n      ...tableParams,\n    })\n    setPagination({\n      total: res.totalCount,\n      pageSize: res.pageSize,\n      current: res.pageNum,\n    })\n\n    setTableLoading(false)\n    setTableData(res.list)\n  }\n  useEffect(() => {\n    fetchTableData()\n  }, [tableParams])\n  useEffect(() => {\n    if (currentProject !== -1) {\n      fetchTableData(dateParams)\n      setTableParams(preParams => ({\n        ...preParams,\n        pageNum: 1,\n      }))\n    }\n  }, [time, currentProject])\n\n  const onChangeTable = (paginationParam, filters, sorter) => {\n    const isDesc = Object.keys(sorter).length > 0 ? (sorter.order === 'ascend' ? 1 : 0) : undefined,\n      orderField = sorter.field,\n      pageSize = paginationParam.pageSize,\n      status = filters.status ? filters.status.join(',') : ''\n    const isSorter = tableParams.isDesc !== isDesc || tableParams.orderField !== orderField\n    const pageNum = isSorter ? 1 : paginationParam.current\n    setTableParams({\n      isDesc,\n      orderField,\n      pageNum,\n      pageSize,\n      status,\n    })\n  }\n  return (\n    <div>\n      <CardWrapper title=\"收藏列表\">\n        <ErrorsTable\n          fetchData={fetchTableData}\n          onChange={onChangeTable}\n          loading={tableLoading}\n          tableData={tableData}\n          pagination={pagination}\n        ></ErrorsTable>\n      </CardWrapper>\n    </div>\n  )\n}\n"],"sourceRoot":""}