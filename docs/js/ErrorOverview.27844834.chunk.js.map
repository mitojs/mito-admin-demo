{"version":3,"sources":["webpack:///./src/modules/Main/modules/ErrorOverview/components/ErrorTypeTrendChart.tsx","webpack:///./src/modules/Main/modules/ErrorOverview/services.ts","webpack:///./src/components/PieChart/index.tsx","webpack:///./src/modules/Main/modules/ErrorOverview/components/ErrorsTypeCircle.tsx","webpack:///./src/modules/Main/modules/ErrorOverview/components/ProjectHealthProfile.tsx","webpack:///./src/components/TitleCountNum.tsx","webpack:///./src/modules/Main/modules/ErrorOverview/components/PvUvAreaChart.tsx","webpack:///./src/modules/Main/modules/ErrorOverview/ErrorOverview.tsx","webpack:///./src/components/AreaChart.tsx","webpack:///./src/hooks/useCount/index.tsx"],"names":["WrapRow","styled","ErrorTypeTrendChart","time","useSelector","state","global","currentProject","useState","chartData","setChartData","loading","setLoading","getErrorTypesChart","params","projectId","startDate","endDate","request","get","data","res","useEffect","style","marginTop","gutter","active","map","item","xl","span","xs","key","type","series","row","chart","v","count","name","CardWrapper","title","getErrorTypeCN","AreaChart","xAxisData","date","PieChart","props","options","labels","width","height","plotOptions","pie","startAngle","endAngle","donut","size","show","dataLabels","enabled","fill","legend","formatter","val","opts","w","globals","seriesIndex","fontSize","responsive","breakpoint","position","dom","useRef","ApexCharts","current","render","destroy","ref","Container","div","TitleDiv","ErrorsTypeCircle","history","useHistory","strokeLinecap","strokeWidth","strokeColor","color","format","percent","successPercent","onClick","push","reverseRed","red","slice","reverse","ProjectHealthProfile","score","statusStatistic","typeStatistic","statisticData","setStatisticData","getErrorTypesStatistic","PieChartRender","useMemo","Array","isArray","forEach","ErrorStatus","status","TypeStatisticRender","sort","a","b","index","rightRender","className","align","flex","justify","FlexContainer","TitleContainer","TitleCountNum","num","titleSize","numCount","useCount","TitleNumContainer","PvUvAreaChart","pvSum","uvSum","pvUvStats","setPvUvStats","dateParams","fetchPvUvStats","other","THEMECOLORS","apexBlue","apexGreen","length","pvCounts","uvCounts","dates","pvCount","uvCount","RenderAreaChart","Overview","colors","ChartColors","zoom","toolbar","text","stroke","curve","yaxis","opposite","opacity","tooltipHoverFormatter","dataPointIndex","onItemHover","highlightDataSeries","horizontalAlign","config","start","duration","delay","useCountUp","end","countUp","update"],"mappings":"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","file":"js/ErrorOverview.27844834.chunk.js","sourcesContent":["import { getErrorTypeCN } from '@/common/constant'\nimport AreaChart from '@/components/AreaChart'\nimport CardWrapper from '@/components/CardWrapper'\nimport { RootState } from '@/store/index.type'\nimport { Col, Row, Skeleton } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { getErrorTypesChartFetch } from '../services'\nconst WrapRow = styled(Row)`\n  /* margin-top: 20px; */\n`\nexport default function ErrorTypeTrendChart() {\n  const time = useSelector<RootState>(state => state.global.time)\n  const currentProject = useSelector<RootState, number>(state => state.global.currentProject)\n  const [chartData, setChartData] = useState<NErrorTypeChart.Response>([])\n  const [loading, setLoading] = useState(true)\n\n  const getErrorTypesChart = async () => {\n    setLoading(true)\n    const res = await getErrorTypesChartFetch({ projectId: currentProject, startDate: time[0], endDate: time[1] })\n    setChartData(res)\n    setLoading(false)\n  }\n  useEffect(() => {\n    getErrorTypesChart()\n  }, [time, currentProject])\n  const RenderChartCard = (row: NErrorTypeChart.ResponseItem) => {\n    const series = [\n      {\n        data: row.chart.map(v => v.count),\n        name: '错误数',\n      },\n    ]\n    return (\n      <CardWrapper title={getErrorTypeCN(row.type)}>\n        <AreaChart series={series} xAxisData={row.chart.map(v => v.date)}></AreaChart>\n      </CardWrapper>\n    )\n  }\n  return (\n    <WrapRow style={{ marginTop: '20px' }} gutter={[20, 20]}>\n      <Skeleton active loading={loading}>\n        {chartData.map(item => {\n          return (\n            <Col xl={{ span: 12 }} xs={{ span: 24 }} key={item.type}>\n              {RenderChartCard(item)}\n            </Col>\n          )\n        })}\n      </Skeleton>\n    </WrapRow>\n  )\n}\n","import { NProjectPvUvStats } from '@/d.ts/project'\nimport request from '@/services/request'\nexport const getErrorTypesStatisticFetch = (params: NErrorHealthProfile.Request) =>\n  request.get<null, NErrorHealthProfile.Response>('/errors/types/statistics', {\n    data: params,\n  })\n\nexport const getErrorTypesChartFetch = (params: NErrorTypeChart.Request) =>\n  request.get<null, NErrorTypeChart.Response>('/errors/types/chart', {\n    data: params,\n  })\n\nexport const getPvUvStatsFetch = (params: NProjectPvUvStats.Request) => {\n  const { projectId, ...other } = params\n  return request.get<null, NProjectPvUvStats.Response>(`/project/pvuv/projectId/${projectId}`, {\n    data: other,\n  })\n}\n","import React, { useEffect, useRef } from 'react'\nimport ApexCharts from 'apexcharts'\n\ntype propsType = {\n  series: any[]\n  labels: any[]\n  width?: number\n  height?: number\n}\nexport default function PieChart(props: propsType) {\n  const options = {\n    series: props.series,\n    labels: props.labels,\n    chart: {\n      width: props.width || 360,\n      height: props.height || 200,\n      type: 'donut',\n    },\n    plotOptions: {\n      pie: {\n        startAngle: -90,\n        endAngle: 270,\n        donut: {\n          size: '65%',\n          labels: {\n            show: true,\n          },\n        },\n      },\n    },\n    dataLabels: {\n      enabled: true,\n      // formatter: function (val) {\n      //   console.log('value', val)\n      //   return val + '%'\n      // },\n    },\n    fill: {\n      type: 'gradient',\n    },\n    legend: {\n      formatter: function (val, opts) {\n        return val + ' - ' + opts.w.globals.series[opts.seriesIndex]\n      },\n      fontSize: '16px',\n    },\n    // title: {\n    //   text: 'Gradient Donut with custom Start-angle',\n    // },\n    responsive: [\n      {\n        breakpoint: 480,\n        options: {\n          chart: {\n            width: 200,\n          },\n          legend: {\n            position: 'bottom',\n          },\n        },\n      },\n    ],\n  }\n  const dom = useRef(null)\n  useEffect(() => {\n    const chart = new ApexCharts(dom.current, options)\n    chart.render()\n    return () => {\n      chart.destroy()\n    }\n  }, [props])\n  return <div ref={dom}></div>\n}\n","import { ErrorStatus, getErrorTypeCN } from '@/common/constant'\nimport { Progress } from 'antd'\nimport React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\n\ntype propsType = {\n  percent: number\n  type: string\n  count: number\n  color: string\n}\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`\nconst TitleDiv = styled.div`\n  font-size: 18px;\n  font-weight: 500;\n  margin-top: 6px;\n  cursor: pointer;\n  color: volcano;\n`\n\nexport default function ErrorsTypeCircle(props: propsType) {\n  const history = useHistory()\n  function format(percent, successPercent) {\n    return percent + '%'\n  }\n\n  function onClickTitle() {\n    history.push(`errors?type=${props.type}`)\n  }\n  return (\n    <Container>\n      <Progress\n        strokeLinecap=\"round\"\n        strokeWidth={8}\n        strokeColor={props.color}\n        format={format}\n        type=\"circle\"\n        percent={props.percent}\n      />\n      <TitleDiv onClick={onClickTitle} style={{ color: props.color }}>\n        {getErrorTypeCN(props.type)}:<span style={{ fontSize: '20px' }}>{props.count}</span>\n      </TitleDiv>\n    </Container>\n  )\n}\n","import { COLORS, ErrorStatus } from '@/common/constant'\nimport CardWrapper from '@/components/CardWrapper'\nimport PieChart from '@/components/PieChart'\nimport { RootState } from '@/store/index.type'\nimport { Button, Col, Row } from 'antd'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getErrorTypesStatisticFetch } from '../services'\nimport ErrorsTypeCircle from './ErrorsTypeCircle'\nimport { red } from '@ant-design/colors'\nimport { useHistory } from 'react-router-dom'\n\nconst reverseRed = red.slice(1, 9).reverse()\nexport default function ProjectHealthProfile() {\n  const time = useSelector<RootState>(state => state.global.time)\n  const currentProject = useSelector<RootState, number>(state => state.global.currentProject)\n  const [loading, setLoading] = useState(false)\n  const [statisticData, setStatisticData] = useState<NErrorHealthProfile.Response>({\n    score: 0,\n    statusStatistic: [],\n    typeStatistic: [],\n  })\n  const history = useHistory()\n\n  const getErrorTypesStatistic = async () => {\n    setLoading(true)\n    const data = await getErrorTypesStatisticFetch({\n      projectId: currentProject,\n      startDate: time[0],\n      endDate: time[1],\n    })\n    setStatisticData(data)\n    setLoading(false)\n  }\n  const gotoProjectError = () => {\n    history.push(`/errors`)\n  }\n  useEffect(() => {\n    if (currentProject !== -1) {\n      getErrorTypesStatistic()\n    }\n  }, [time, currentProject])\n  const PieChartRender = useMemo(() => {\n    const { statusStatistic, score } = statisticData\n    const series = [],\n      labels = []\n    if (Array.isArray(statusStatistic)) {\n      statusStatistic.forEach(item => {\n        labels.push(ErrorStatus[item.status])\n        series.push(item.count)\n      })\n    }\n    return <PieChart series={series} labels={labels}></PieChart>\n  }, [statisticData])\n  const TypeStatisticRender = useMemo(() => {\n    const { typeStatistic } = statisticData\n    return typeStatistic\n      .sort((a, b) => b.percent - a.percent)\n      .map((item, index) => {\n        return (\n          <Col key={item.type}>\n            <ErrorsTypeCircle color={reverseRed[index]} {...item}></ErrorsTypeCircle>\n          </Col>\n        )\n      })\n  }, [statisticData])\n  return (\n    <CardWrapper\n      title=\"项目健康概况\"\n      loading={loading}\n      rightRender={() => (\n        <Button type=\"link\" onClick={() => gotoProjectError()}>\n          进入错误列表\n        </Button>\n      )}\n    >\n      <Row className=\"no-wrap-row\" align=\"middle\" gutter={[20, 20]}>\n        <Col flex=\"200px\">{PieChartRender}</Col>\n        <Col flex=\"auto\">\n          <Row justify=\"space-around\" align=\"middle\" gutter={[20, 20]}>\n            {TypeStatisticRender}\n          </Row>\n        </Col>\n      </Row>\n    </CardWrapper>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { THEMECOLORS, ICONTYPE } from '@/common/constant'\nimport useCount from '@/hooks/useCount'\nimport styled from 'styled-components'\n\ntype propsType = {\n  title: string\n  titleSize?: number\n  num: number\n  /**\n   * 全局枚举的颜色\n   */\n  color: THEMECOLORS\n}\nconst FlexContainer = styled.div`\n  display: flex;\n  align-items: center;\n`\nconst TitleContainer = styled.div`\n  margin-right: 6px;\n`\nexport default function TitleCountNum(props: propsType) {\n  const { title, num, color, titleSize } = props\n  const numCount = useCount(num)\n  return (\n    <FlexContainer>\n      <TitleContainer style={{ fontSize: `${titleSize ? titleSize + 'px' : '14px'}` }}>{title}</TitleContainer>\n      <div style={{ color, fontSize: '24px' }}>{numCount}</div>\n    </FlexContainer>\n  )\n}\n","import { THEMECOLORS } from '@/common/constant'\nimport AreaChart from '@/components/AreaChart'\nimport CardWrapper from '@/components/CardWrapper'\nimport TitleCountNum from '@/components/TitleCountNum'\nimport { NProjectPvUvStats } from '@/d.ts/project'\nimport { RootState } from '@/store/index.type'\nimport React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { getPvUvStatsFetch } from '../services'\nconst TitleNumContainer = styled.div`\n  display: flex;\n  position: absolute;\n  right: 40px;\n  top: 0;\n  > div {\n    margin-left: 10px;\n  }\n`\nexport default function PvUvAreaChart() {\n  const time = useSelector<RootState>(state => state.global.time)\n  const currentProject = useSelector<RootState, number>(state => state.global.currentProject)\n  const [pvUvStats, setPvUvStats] = useState<NProjectPvUvStats.Response>({\n    chart: [],\n    pvSum: 0,\n    uvSum: 0,\n  })\n  const [loading, setLoading] = useState(false)\n  const dateParams = {\n    startDate: time[0],\n    endDate: time[1],\n    projectId: currentProject,\n  }\n  const fetchPvUvStats = async () => {\n    setLoading(true)\n    const res = await getPvUvStatsFetch(dateParams)\n    setPvUvStats(res)\n    setLoading(false)\n  }\n  useEffect(() => {\n    fetchPvUvStats()\n  }, [time, currentProject])\n\n  const RenderAreaChart = (chart: NProjectPvUvStats.PvUvChart[]) => {\n    const pvCounts = []\n    const uvCounts = []\n    const dates = []\n    chart.forEach(item => {\n      pvCounts.push(item.pvCount)\n      uvCounts.push(item.uvCount)\n      dates.push(item.date)\n    })\n    const series = [\n      {\n        data: pvCounts,\n        name: 'PV',\n      },\n      {\n        data: uvCounts,\n        name: 'UV',\n      },\n    ]\n    return <AreaChart series={series} xAxisData={dates}></AreaChart>\n  }\n  return (\n    <CardWrapper title=\"PvUv统计\" loading={loading}>\n      <div style={{ height: '295px' }}>\n        <TitleNumContainer>\n          <TitleCountNum title=\"总PV:\" num={pvUvStats.pvSum} color={THEMECOLORS.apexBlue}></TitleCountNum>\n          <TitleCountNum title=\"总UV:\" num={pvUvStats.uvSum} color={THEMECOLORS.apexGreen}></TitleCountNum>\n        </TitleNumContainer>\n        {pvUvStats.chart.length > 0 && RenderAreaChart(pvUvStats.chart)}\n      </div>\n    </CardWrapper>\n  )\n}\n","import { Col, Row } from 'antd'\nimport React from 'react'\nimport ErrorStatsSum from '../components/ErrorStatsSum'\nimport ErrorTypeTrendChart from './components/ErrorTypeTrendChart'\nimport ProjectHealthProfile from './components/ProjectHealthProfile'\nimport PvUvAreaChart from './components/PvUvAreaChart'\n\nexport default function Overview() {\n  return (\n    <div>\n      <Row gutter={[20, 20]} className=\"no-wrap-row\">\n        {/* <Col><ErrorStatsSum></ErrorStatsSum></Col> */}\n        <Col flex=\"auto\">\n          <PvUvAreaChart></PvUvAreaChart>\n        </Col>\n      </Row>\n      <ProjectHealthProfile></ProjectHealthProfile>\n      <ErrorTypeTrendChart></ErrorTypeTrendChart>\n    </div>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport ApexCharts from 'apexcharts'\nimport { ChartColors } from '@/common/constant'\n\ntype propsType = {\n  xAxisData: any[]\n  series: any\n  title?: string\n  toolbar?: boolean\n}\nexport default function AreaChart(props: propsType) {\n  const options = {\n    series: props.series,\n    colors: ChartColors,\n    chart: {\n      type: 'area',\n      height: 280,\n      zoom: {\n        enabled: true,\n      },\n      toolbar: {\n        show: !!props.toolbar,\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    title: {\n      text: props.title || '',\n    },\n    stroke: {\n      curve: 'smooth',\n      show: true,\n      width: [3, 2, 1.5],\n    },\n    labels: props.xAxisData,\n    yaxis: {\n      opposite: false,\n      labels: {\n        align: 'left',\n      },\n    },\n    fill: {\n      opacity: 1,\n    },\n    legend: {\n      tooltipHoverFormatter: function (val, opts) {\n        return val + ' : ' + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + ''\n      },\n      onItemHover: {\n        highlightDataSeries: true,\n      },\n      horizontalAlign: 'left',\n      position: 'top',\n    },\n  }\n\n  const dom = useRef(null)\n  useEffect(() => {\n    const chart = new ApexCharts(dom.current, options)\n    chart.render()\n    return () => {\n      chart.destroy()\n    }\n  }, [props])\n  return <div ref={dom}></div>\n}\n","import React, { useEffect } from 'react'\nimport { useCountUp } from 'react-countup'\nconst config = {\n  start: 0,\n  duration: 1,\n  delay: 0,\n}\nexport default function useCount(num: number) {\n  const { countUp, update } = useCountUp({ end: num, ...config })\n  useEffect(() => {\n    update(num)\n  }, [num])\n  return countUp\n}\n"],"sourceRoot":""}