{"version":3,"sources":["webpack:///./src/modules/Main/modules/Team/components/ModalAddTeam.tsx","webpack:///./src/modules/Main/modules/Team/Team.tsx","webpack:///./src/modules/Main/modules/Team/services/index.ts"],"names":["ModalAddTeam","props","ref","fetchData","formRef","useRef","useState","visible","setVisible","onOk","current","submit","handleForm","values","addTeamFetch","res","message","success","showModal","data","useImperativeHandle","onCancel","resetFields","title","okText","cancelText","onFinish","labelAlign","labelCol","span","wrapperCol","name","Item","label","rules","required","type","max","forwardRef","Team","history","useHistory","dispatch","useDispatch","useSWR","teamListFetch","initialData","revalidateOnMount","list","mutate","modalRef","currentTeamId","useSelector","state","global","userInfo","currentUser","switchCurrentTeam","teamId","switchCurrentTeamIdFetch","SET_CURRENT_TEAM_ID","payload","columns","render","row","onClick","push","teamName","dataIndex","key","role","TeamRoleMap","createdAt","formatTime","_","record","disabled","CardWrapper","rightRender","isAdmin","bordered","rowKey","dataSource","pagination","hideOnSinglePage","request","get","put","teamUserListFetch","deleteTeamUserFetch","params","teamInfoFetch","userFuzzySearchFetch","addTeamMemberFetch","post","putTeamInfoFetch","putUserRole"],"mappings":"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","file":"js/team.be8e9742.chunk.js","sourcesContent":["import { Form, Input, message, Modal } from 'antd'\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react'\nimport { addTeamFetch } from '../services'\n\nfunction ModalAddTeam(props: any, ref) {\n  const { fetchData } = props\n  const formRef = useRef(null)\n  const [visible, setVisible] = useState(false)\n  const onOk = async () => {\n    formRef.current.submit()\n  }\n  const handleForm = async values => {\n    const res = await addTeamFetch({\n      ...values,\n    })\n    message.success(res.message)\n    setVisible(false)\n    fetchData()\n  }\n  const showModal = data => setVisible(data)\n  useImperativeHandle(ref, () => {\n    return {\n      showModal,\n    }\n  })\n  const formItemLayout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 },\n  }\n  return (\n    <Modal\n      onCancel={() => {\n        formRef.current.resetFields()\n        showModal(false)\n      }}\n      onOk={onOk}\n      visible={visible}\n      title=\"新增团队\"\n      okText=\"确认\"\n      cancelText=\"取消\"\n    >\n      <Form ref={formRef} onFinish={handleForm} labelAlign=\"right\" {...formItemLayout} name=\"edit-basic\">\n        <Form.Item\n          label=\"团队名称\"\n          name=\"teamName\"\n          rules={[{ required: true, type: 'string', max: 20, message: '请输入团队名称' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"钉钉通知地址\"\n          name=\"dingtalkRobot\"\n          rules={[{ required: true, message: '请输入团队钉钉通知地址' }]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  )\n}\n\nexport default forwardRef(ModalAddTeam)\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Table, Tag, Space, Button, message } from 'antd'\nimport CardWrapper from '@/components/CardWrapper'\nimport { useHistory } from 'react-router'\nimport { switchCurrentTeamIdFetch, teamListFetch } from './services'\nimport { TeamRoleMap } from '@/common/constant'\nimport useSWR from 'swr'\nimport { formatTime } from '@/utils'\nimport ModalAddTeam from './components/ModalAddTeam'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { SET_CURRENT_TEAM_ID } from '@/store/modules/global/action-types'\nimport { RootState } from '@/store/index.type'\n\nexport default function Team() {\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const { data: list, mutate } = useSWR('teamListFetch', teamListFetch, { initialData: [], revalidateOnMount: true })\n  const modalRef = useRef(null)\n  const currentTeamId = useSelector((state: RootState) => state.global.currentTeamId)\n  const userInfo = useSelector((state: RootState) => state.global.currentUser)\n\n  const switchCurrentTeam = async (teamId: number) => {\n    const res = await switchCurrentTeamIdFetch(teamId)\n    message.success(res.message)\n    dispatch({ type: SET_CURRENT_TEAM_ID, payload: teamId })\n    mutate()\n  }\n  const columns = [\n    {\n      title: '团队名',\n      render: row => (\n        <Button type=\"link\" onClick={() => history.push(`/team/${row.teamId}`)}>\n          {row.teamName}\n        </Button>\n      ),\n    },\n    {\n      title: '我的角色',\n      dataIndex: 'role',\n      key: 'role',\n      render: role => <Tag>{TeamRoleMap[role]}</Tag>,\n    },\n    {\n      title: '成员数',\n      dataIndex: 'memberCount',\n      key: 'memberCount',\n    },\n    {\n      title: '项目数',\n      dataIndex: 'projectCount',\n      key: 'projectCount',\n    },\n    {\n      title: '负责人',\n      dataIndex: 'ownerName',\n      key: 'ownerName',\n    },\n    {\n      title: '创建时间',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: createdAt => <div>{formatTime(createdAt)}</div>,\n    },\n    {\n      title: '操作',\n      // dataIndex: 'selected',\n      // key: 'selected',\n      render: (_, record) =>\n        currentTeamId === record.teamId ? (\n          <Button disabled>当前团队</Button>\n        ) : (\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              switchCurrentTeam(record.teamId)\n            }}\n          >\n            切换团队\n          </Button>\n        ),\n    },\n  ]\n\n  const CreateTeamBtn = () => {\n    return (\n      userInfo.isAdmin && (\n        <Button type=\"link\" onClick={() => modalRef.current.showModal(true)}>\n          创建团队\n        </Button>\n      )\n    )\n  }\n\n  return (\n    <CardWrapper title={'团队列表'} rightRender={CreateTeamBtn}>\n      <ModalAddTeam ref={modalRef} fetchData={mutate}></ModalAddTeam>\n      <Table bordered columns={columns} rowKey=\"teamId\" dataSource={list} pagination={{ hideOnSinglePage: true }} />\n    </CardWrapper>\n  )\n}\n","import request from '@/services/request'\n\n/**\n * 团队列表获取\n */\nexport const teamListFetch = () => request.get<null, ATeamList.Response>('/team/list')\n\n/**\n * 切换当前选中的团队id\n * @param teamId 团队id\n */\nexport const switchCurrentTeamIdFetch = (teamId: number) =>\n  request.put<null, Common.CommonMessage>(`/user/selected/teamId/${teamId}`)\n\n/**\n * 团队成员列表获取\n */\nexport const teamUserListFetch = (teamId: number) =>\n  request.get<null, ATeamUserList.Response>(`/team/user/list/teamId/${teamId}`)\n\n/**\n * 删除团队成员\n */\nexport const deleteTeamUserFetch = (params: ATeamUserDelete.Request) =>\n  request.delete<null, ATeamUserDelete.Response>(`/team/user`, { data: params })\n\n/**\n * 获取团队信息\n */\nexport const teamInfoFetch = (teamId: number) => request.get<null, ATeamInfo.Response>(`/team/teamId/${teamId}`)\n\n/**\n * 根据用户名或者email模糊搜索用户\n * @param params\n */\nexport const userFuzzySearchFetch = (params: AUserSearch.Request) =>\n  request.get<null, AUserSearch.Response>('/user/search', {\n    data: params,\n  })\n\n/**\n * 批量新增团队成员\n * @param params\n */\nexport const addTeamMemberFetch = (params: ATeamAddUser.Request) =>\n  request.post<null, ATeamAddUser.Response>('/team/users', params)\n\n/**\n * 更改团队信息\n * @param teamId 团队id\n */\nexport const putTeamInfoFetch = (teamId: number, params: NTeamPutInfo.Request) =>\n  request.put<null, Common.CommonMessage>(`/team/teamId/${teamId}`, params)\n\n/**\n * 新增团队\n */\nexport const addTeamFetch = (params: NTeamAdd.Request) => request.post<null, Common.CommonMessage>(`/team`, params)\n\n/**\n * 更改团队成员角色\n * @param params\n */\nexport const putUserRole = (params: NTeamPutUserRole.Request) =>\n  request.put<null, Common.CommonMessage>('/team/user/role', params)\n"],"sourceRoot":""}