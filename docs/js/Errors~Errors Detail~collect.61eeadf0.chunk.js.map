{"version":3,"sources":["webpack:///./src/components/AsyncClickSelect/index.module.less","webpack:///./src/modules/Main/modules/components/ErrorRemark.tsx","webpack:///./src/modules/Main/modules/components/ErrorSolve.tsx","webpack:///./src/modules/Main/modules/components/ProjectPlatform.tsx","webpack:///./src/components/ArchiveStar/index.module.less","webpack:///./src/components/ArchiveStar/index.tsx","webpack:///./src/components/AsyncClickSelect/index.tsx","webpack:///./src/modules/Main/modules/components/ErrorAssign.tsx"],"names":["module","exports","ErrorRemark","props","previousRemark","useRef","useState","value","setValue","useEffect","remark","current","updateRemark","updateErrorRemark","errorId","res","success","message","hanldeOnBlur","e","inputValue","target","trim","bordered","placeholder","maxLength","style","onBlur","onChange","updateErrorsStatus","items","status","params","errorIds","map","v","updateErrorsStatusFetch","ErrorSolvingBtn","disabled","successUpdated","handleClick","EnumErrorStatus","solving","title","onClick","icon","twoToneColor","margin","ErrorIgnoreBtn","ignored","color","ErrorSolveBtns","FlexBlock","styled","div","ProjectPlatform","platform","projectName","platformMap","height","size","type","ICONTYPE","square","THEMECOLORS","blue","toUpperCase","ArchiveStar","hover","setHover","className","styles","onMouseEnter","onMouseLeave","irregular","Option","AsyncClickSelect","listQuery","row","list","setList","loading","setLoading","showText","setShowText","id","userId","name","userName","selectedUser","setSelectedUser","response","length","getData","onSelectValue","user","find","updateUserById","getLastName","CaretDownOutlined","width","onSelect","item","key","ErrorAssign","display","flexDirection","alignItems","getUserListByProjectId","projectId","Icon"],"mappings":"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","file":"js/Errors~Errors Detail~collect.61eeadf0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"asyncClickSelect\":\"asyncClickSelect--3W6qiU\",\"display\":\"display--3nYnsG\",\"text\":\"text--Hp4Q_P\",\"abbreviation\":\"abbreviation--2nDeEZ\"};","import { variableTypeDetection } from '@/utils'\nimport { Button, Input, message } from 'antd'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { updateErrorRemark } from '../Errors/services'\n\ntype PropsType = {\n  remark: string\n  errorId: number\n  style?: any\n}\nconst ErrorRemark = (props: PropsType) => {\n  const previousRemark = useRef(null)\n  const [value, setValue] = useState('')\n  useEffect(() => {\n    setValue(props.remark)\n    previousRemark.current = props.remark\n  }, [props.remark])\n  const updateRemark = async (remark: string) => {\n    const res = await updateErrorRemark({\n      errorId: props.errorId,\n      remark,\n    })\n    message.success(res.message)\n  }\n  const hanldeOnBlur = async (e: any) => {\n    const inputValue = e.target.value\n    if (typeof inputValue === 'string' && inputValue.trim() !== '' && inputValue !== previousRemark.current) {\n      await updateRemark(inputValue)\n      setValue(inputValue)\n      previousRemark.current = inputValue\n    }\n  }\n  const handleOnChange = (e: any) => {\n    const inputValue = e.target.value\n    setValue(inputValue)\n  }\n  return (\n    <Input\n      bordered={false}\n      placeholder=\"暂无备注\"\n      maxLength={1024}\n      style={props.style}\n      value={value}\n      onBlur={hanldeOnBlur}\n      onChange={handleOnChange}\n    ></Input>\n  )\n}\n\nexport default ErrorRemark\n","import { EnumErrorStatus } from '@/common/constant'\nimport { Button, message, Tooltip } from 'antd'\nimport React from 'react'\nimport { updateErrorsStatusFetch } from '../Errors/services'\nimport { ClockCircleFilled, CaretDownOutlined, CheckCircleTwoTone, DeleteOutlined } from '@ant-design/icons'\n\ninterface IErrorId {\n  errorId: number\n}\n\ninterface PropsType {\n  disabled?: boolean\n  items: IErrorId[]\n  successUpdated: Function\n}\n\nconst updateErrorsStatus = async (items: IErrorId[], status: EnumErrorStatus) => {\n  const params = {\n    errorIds: items.map(v => v.errorId),\n    status,\n  }\n  const res = await updateErrorsStatusFetch(params)\n  message.success(res.message)\n}\n\nexport function ErrorSolvingBtn(props: PropsType) {\n  const { disabled, items, successUpdated } = props\n  const handleClick = async () => {\n    await updateErrorsStatus(items, EnumErrorStatus.solving)\n    successUpdated()\n  }\n  return (\n    <Tooltip title=\"更改为解决中状态时，两天内再次发生错误时不会告警通知，两天后自动变成已解决\">\n      <Button\n        disabled={disabled}\n        onClick={() => handleClick()}\n        icon={<CheckCircleTwoTone twoToneColor=\"#52c41a\" />}\n        style={{ margin: '0px 10px' }}\n      >\n        解决中\n      </Button>\n    </Tooltip>\n  )\n}\n\nexport function ErrorIgnoreBtn(props: PropsType) {\n  const { disabled, items, successUpdated } = props\n  const handleClick = async () => {\n    await updateErrorsStatus(items, EnumErrorStatus.ignored)\n    successUpdated()\n  }\n  return (\n    <Tooltip title=\"除了解决中状态，其他都可更改为忽视\">\n      <Button\n        disabled={disabled}\n        onClick={() => handleClick()}\n        icon={<DeleteOutlined style={{ color: 'red' }} />}\n        style={{ margin: '0px 10px' }}\n      >\n        忽视\n      </Button>\n    </Tooltip>\n  )\n}\n\ninterface TProps {\n  status: number\n  successUpdated: Function\n  errorId: number\n}\nexport function ErrorSolveBtns({ status, successUpdated, errorId }: TProps) {\n  const solving = EnumErrorStatus.solving\n  return (\n    <>\n      {solving !== status ? <ErrorSolvingBtn items={[{ errorId }]} successUpdated={successUpdated} /> : ''}\n      {EnumErrorStatus.ignored !== status && solving !== status ? (\n        <ErrorIgnoreBtn items={[{ errorId }]} successUpdated={successUpdated} />\n      ) : (\n        ''\n      )}\n    </>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Table, Tag, Button, Tooltip, Badge, Select, Menu, Dropdown, message } from 'antd'\nimport Icon from '@components/Icon'\nimport { ICONTYPE, platformMap, THEMECOLORS } from '@/common/constant'\n\nconst FlexBlock = styled.div`\n  display: flex;\n  align-items: center;\n`\ninterface propsType {\n  platform: number\n  projectName: string\n}\nexport default function ProjectPlatform({ platform, projectName }: propsType) {\n  return (\n    <FlexBlock>\n      <Tooltip title={platformMap[platform]}>\n        <div style={{ height: '22px' }}>\n          <Icon size={22} icon={platformMap[platform]} type={ICONTYPE.square} />\n        </div>\n      </Tooltip>\n\n      <Tooltip title=\"项目名\">\n        <Tag style={{ margin: '0 0 0 10px' }} color={THEMECOLORS.blue}>\n          {projectName && projectName.toUpperCase()}\n        </Tag>\n      </Tooltip>\n    </FlexBlock>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"archiveStar\":\"archiveStar--2UZopj\"};","import React, { useState, useEffect } from 'react'\nimport { ICONTYPE } from '@/common/constant'\nimport * as styles from './index.module.less'\nimport Icon from '@components/Icon'\n\ninterface IArchiveStar {\n  status: boolean\n  size?: number\n  onClick: (e) => any\n}\n\n/**\n * 收藏小星星\n * @param status\n */\n\nexport const ArchiveStar = ({ status, onClick, size = null }: IArchiveStar) => {\n  const [hover, setHover] = useState(false)\n\n  return (\n    <div\n      className={styles.archiveStar}\n      onClick={e => onClick(e)}\n      onMouseEnter={() => {\n        setHover(true)\n      }}\n      onMouseLeave={() => {\n        setHover(false)\n      }}\n    >\n      {status || hover ? (\n        <Icon icon=\"fillstar\" type={ICONTYPE.irregular} size={size} />\n      ) : (\n        <Icon icon=\"emptystar\" type={ICONTYPE.irregular} size={size} />\n      )}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Table, Tag, Button, Tooltip, Select, message } from 'antd'\nimport { getLastName, getNameAbbreviation } from '@/utils'\nimport { CaretDownOutlined } from '@ant-design/icons'\nimport * as styles from './index.module.less'\nimport { updateUserById } from '@/modules/Main/modules/Errors/services'\n\nconst { Option } = Select\n\ninterface IAsyncClickSelect {\n  listQuery: any\n  row: IErrorBase\n}\n\nexport const AsyncClickSelect = ({ listQuery, row }: IAsyncClickSelect) => {\n  const [list, setList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [showText, setShowText] = useState(true)\n  const [selectedUser, setSelectedUser] = useState({ id: row.userId, name: row.userName })\n  useEffect(() => {\n    setSelectedUser({ id: row.userId, name: row.userName })\n  }, [row])\n  useEffect(() => {\n    async function getData() {\n      const response = await listQuery()\n      setList(response)\n      setLoading(false)\n    }\n\n    if (!showText && list.length <= 0) {\n      setLoading(true)\n      getData()\n    }\n  }, [showText])\n\n  const onClickText = () => {\n    setShowText(false)\n  }\n\n  const onSelectValue = async id => {\n    // 请求成功后再改变\n\n    setShowText(true)\n    if (id === selectedUser.id) return\n    const user = list.find(e => e.id == id)\n    const res = await updateUserById({ errorId: row.errorId, userName: user.name, userId: user.id })\n    message.success(res.message || res)\n    setSelectedUser(user)\n  }\n\n  return (\n    <div className={styles.asyncClickSelect}>\n      {showText ? (\n        // 当前数据\n        <div className={styles.display} onClick={onClickText}>\n          <span className={styles.abbreviation}>{getLastName(selectedUser.name)}</span>\n          <CaretDownOutlined />\n        </div>\n      ) : (\n        // 下拉框\n        <Select value={selectedUser.id} style={{ width: 120 }} loading={loading} onSelect={onSelectValue}>\n          {list.map(item => (\n            <Option value={item.id} key={item.id}>\n              {item.name}\n            </Option>\n          ))}\n        </Select>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Tooltip } from 'antd'\nimport { AsyncClickSelect } from '@/components/AsyncClickSelect'\nimport { getUserListByProjectId } from '../Errors/services'\nimport Icon from '@/components/Icon'\n// todo 待优化：列表可以缓存getUserListByProjectId返回的数据，第二次可以先从缓存中取出，没有的话再请求接口\nexport default function ErrorAssign({ row }: { row: IErrorBase }) {\n  return (\n    <div>\n      <Tooltip title=\"负责人\">\n        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n          <AsyncClickSelect row={row} listQuery={() => getUserListByProjectId({ projectId: row.projectId })} />\n          <Icon icon=\"assigned\" size={24}></Icon>\n        </div>\n      </Tooltip>\n    </div>\n  )\n}\n"],"sourceRoot":""}