{
  "extends": [
    "plugin:react/recommended", // Uses the recommended rules from @eslint-plugin-react
    "plugin:@typescript-eslint/recommended", // Uses the recommended rules from the @typescript-eslint/eslint-plugin
    "prettier/@typescript-eslint", // Uses eslint-config-prettier to disable ESLint rules from @typescript-eslint/eslint-plugin that would conflict with prettier
    "plugin:prettier/recommended" // Enables eslint-plugin-prettier and eslint-config-prettier. This will display prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
  ],
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  // ESLint 默认使用Espree作为其解析器，你可以在配置文件中指定一个不同的解析器
  "parser": "@typescript-eslint/parser",
  // ESLint 支持使用第三方插件。在使用插件之前，你必须使用 npm 安装它。
  // 在配置文件里配置插件时，可以使用 plugins 关键字来存放插件名字的列表。插件名称可以省略 eslint-plugin- 前缀。 如：eslint-plugin-react
  "plugins": ["react", "@typescript-eslint", "react-hooks"],
  "settings": {
    "react": {
      "pragma": "React",
      "version": "detect"
    }
  },
  // 配置解析器支持的语法
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  //  "globals": {
  //    "document": true,
  //    "navigator": true,
  //    "window": true,
  //    "node": true
  //  }
  // ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用的规则
  // https://www.npmjs.com/package/@typescript-eslint/eslint-plugin
  // 要改变一个规则设置，你必须将规则 ID 设置为下列值之一：
  // "off" 或 0 - 关闭规则
  // "warn" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)
  // "error" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)
  "rules": {
    "@typescript-eslint/no-unused-vars": 0,
    "@typescript-eslint/no-explicit-any": 0,
    "@typescript-eslint/no-empty-interface": 0,
    // 关闭 在函数中必须要用PropTypes
    "@typescript-eslint/explicit-function-return-type": 0,
    // 关闭 在类中必须要用PropTypes
    "@typescript-eslint/explicit-module-boundary-types": 0,
    "@typescript-eslint/camelcase": 0,
    // 关闭 使用默认类型比如：Function
    "@typescript-eslint/ban-types": 0,
    "react/prop-types": "off",
    // 在定义之前可以使用函数、类，因为有变量提升
    "@typescript-eslint/no-use-before-define": [
      "error",
      {
        "functions": false,
        "classes": false
      }
    ],
    "react-hooks/rules-of-hooks": "error", // 检查 Hook 的规则
    "react/display-name": "off",
    "@typescript-eslint/no-namespace": "off",
    "react-hooks/exhaustive-deps": "off" // 检查 effect 的依赖
  }
}
